name: Auto Deploy

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - '.github/**/*.*'
      - '.gitignore'
      - '.vscode/**/*.*'
      - '**.md'

  workflow_dispatch:
    branches:
      - main
      - dev
    inputs:
      commit_message:
        description: commit message
        required: true
        default: remote data update

concurrency:
  # Ensures that only one deploy task per branch/environment will run at a time.
  group: environment-${{ github.ref }}

  # cancel any in-progress job or run
  # group: ${{ github.head_ref }}

  # Automatically cancel in-progress actions on the same branch
  # group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  submodule-update:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
        with:
          submodules: recursive
          ref: ${{ github.event.ref }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Submodule update
        run: git submodule update --remote

      - name: Process changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "${{ github.event.inputs.commit_message }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
        with:
          submodules: recursive
          ref: ${{ github.event.ref }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v2.5.1
        with:
          node-version: 16
          cache: 'yarn'
          # node-version: 14.x
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      #- name: Get yarn cache directory path
      #  id: yarn-cache-dir-path
      #  run: echo "::set-output name=dir::$(yarn cache dir)"

      #- uses: actions/cache@v2.1.7
      #  id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #  with:
      #    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #    restore-keys: ${{ runner.os }}-yarn-

      - name: Installing NPM dependencies
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        # run: yarn install --prefer-offline
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile --ignore-engines --registry https://registry.npmjs.org --network-timeout 300000
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          CI: true

      - name: Set development env
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          echo "BRANCH_NAME=dev" >> $GITHUB_ENV
          echo "NO_INDEX=${{ secrets.NO_INDEX }}" >> $GITHUB_ENV
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
          echo "SENDGRID_SINGLE_SENDER=${{ secrets.SENDGRID_SINGLE_SENDER }}" >> $GITHUB_ENV
          echo "TO_EMAIL=${{ secrets.TO_EMAIL }}" >> $GITHUB_ENV
          echo "NETLIFY_AUTH_TOKEN=${{ secrets.NETLIFY_AUTH_TOKEN }}" >> $GITHUB_ENV
          echo "NETLIFY_SITE_ID=${{ secrets.NETLIFY_SITE_ID }}" >> $GITHUB_ENV

      - name: Set production env
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "BRANCH_NAME=main" >> $GITHUB_ENV
          echo "NO_INDEX=${{ secrets.NO_INDEX_SBARS }}" >> $GITHUB_ENV
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY_SBARS }}" >> $GITHUB_ENV
          echo "SENDGRID_SINGLE_SENDER=${{ secrets.SENDGRID_SINGLE_SENDER_SBARS }}" >> $GITHUB_ENV
          echo "TO_EMAIL=${{ secrets.TO_EMAIL_SBARS }}" >> $GITHUB_ENV
          echo "NETLIFY_AUTH_TOKEN=${{ secrets.NETLIFY_AUTH_TOKEN_SBARS }}" >> $GITHUB_ENV
          echo "NETLIFY_SITE_ID=${{ secrets.NETLIFY_SITE_ID_SBARS }}" >> $GITHUB_ENV

      - name: Build the project
        run: |
          npm i -g gatsby-cli
          yarn build
        env:
          GATSBY_TELEMETRY_DISABLED: 1
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          WARNINGS: ${{ secrets.WARNINGS }}
          NO_INDEX: ${{ env.NO_INDEX }}
          SENDGRID_API_KEY: ${{ env.SENDGRID_API_KEY }}
          SENDGRID_SINGLE_SENDER: ${{ env.SENDGRID_SINGLE_SENDER }}
          TO_EMAIL: ${{ env.TO_EMAIL }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}

      - name: Check build
        if: failure()
        run: |
          echo "AT_STATE=Build: failed" >> $GITHUB_ENV

      - name: Deploy to Netlify
        if: success()
        #uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ env.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ env.NETLIFY_SITE_ID }}
        #with:
        #  args: deploy --dir=public --prod
        run: |
          npm i -g netlify-cli
          netlify deploy --prod --dir=public --telemetry-disable


      - name: Check deploy
        if: ${{ failure() && env.AT_STATE == '' }}
        run: |
          echo "AT_STATE=Deploy: failed" >> $GITHUB_ENV

      - name: Set message on success
        if: success()
        run: |
          echo "AT_STATE=Deploy: OK" >> $GITHUB_ENV

      - name: "Get commit message for 'workflow_dispatch' event"
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "COMMIT_MESSAGE=${{ github.event.inputs.commit_message }}" >> $GITHUB_ENV

      # https://acdcjunior.dev/git-get-first-line-commit-message-shell.html
      # git log --oneline --format=%B -n 1 HEAD | head -n 1
      - name: "Extract first line from commit message of 'push' event"
        if: ${{ github.event_name == 'push' }}
        id: get_push_msg
        run: echo "::set-output name=commit_msg::${{ github.event.head_commit.message }}"

      - name: "Get commit message for 'push' event"
        if: ${{ github.event_name == 'push' }}
        run: echo "COMMIT_MESSAGE=${{ steps.get_push_msg.outputs.commit_msg }}" >> $GITHUB_ENV

      - name: Send to Telegram
        if: ${{ always() && !cancelled() && !(env.AT_STATE == format('Deploy{0} OK', ':') && startsWith(env.COMMIT_MESSAGE, 'Bump ')) }}
        # uses: appleboy/telegram-action@master
        # with:
        #  to: ${{ secrets.TELEGRAM_TO }}
        #  token: ${{ secrets.TELEGRAM_TOKEN }}
        #  args: "${{ env.AT_STATE }}, branch: ${{ env.BRANCH_NAME }}, ${{ env.COMMIT_MESSAGE }}"
        run: |
          T_MESSAGE="${{ env.AT_STATE }}, branch: ${{ env.BRANCH_NAME }}, ${{ env.COMMIT_MESSAGE }}"
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage?text=$T_MESSAGE&chat_id=${{ secrets.TELEGRAM_TO }}"

